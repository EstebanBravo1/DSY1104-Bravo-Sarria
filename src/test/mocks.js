// tests/03-mocks.test.js
// üéì PRUEBAS CON MOCKS PARA ESTUDIANTES
// IE2.3.1: Simulaciones y esp√≠as

/* global describe, it, expect, spyOn */
// ‚Üë Esta l√≠nea le dice al editor que estas funciones est√°n disponibles globalmente

describe('üîµ NIVEL 3: Mocks y Simulaciones', function() {
  
  it('‚úÖ Puede simular el comportamiento de una funci√≥n', function() {
    // Objeto con una funci√≥n
    var calculadora = {
      sumar: function(a, b) {
        return a + b;
      }
    };
    
    // Crear un esp√≠a (spy) para monitorear la funci√≥n
    spyOn(calculadora, 'sumar').and.returnValue(100);
    
    // Usar la funci√≥n
    var resultado = calculadora.sumar(5, 3);
    
    // Verificar que fue llamada y que devolvi√≥ lo que quer√≠amos
    expect(calculadora.sumar).toHaveBeenCalled();
    expect(calculadora.sumar).toHaveBeenCalledWith(5, 3);
    expect(resultado).toBe(100);
  });

  it('‚úÖ Puede contar cu√°ntas veces se llama una funci√≥n', function() {
    var contador = {
      incrementar: function() {
        return 1;
      }
    };
    
    // Esp√≠a que permite que la funci√≥n original funcione
    spyOn(contador, 'incrementar').and.callThrough();
    
    // Llamar la funci√≥n varias veces
    contador.incrementar();
    contador.incrementar();
    contador.incrementar();
    
    // Verificar cu√°ntas veces fue llamada
    expect(contador.incrementar).toHaveBeenCalledTimes(3);
  });

  it('‚úÖ Puede simular localStorage', function() {
    // Crear un mock simple de localStorage
    var mockStorage = {
      datos: {},
      setItem: function(clave, valor) {
        this.datos[clave] = valor;
      },
      getItem: function(clave) {
        return this.datos[clave] || null;
      },
      removeItem: function(clave) {
        delete this.datos[clave];
      }
    };
    
    // Probar el mock
    mockStorage.setItem('nombre', 'Juan');
    expect(mockStorage.getItem('nombre')).toBe('Juan');
    
    mockStorage.removeItem('nombre');
    expect(mockStorage.getItem('nombre')).toBe(null);
  });

  it('‚úÖ Puede simular una llamada as√≠ncrona', function(done) {
    // Funci√≥n que simula una llamada a una API
    function obtenerDatos() {
      return new Promise(function(resolve) {
        setTimeout(function() {
          resolve({ mensaje: 'Datos obtenidos' });
        }, 100);
      });
    }
    
    // Probar la funci√≥n as√≠ncrona
    obtenerDatos().then(function(datos) {
      expect(datos.mensaje).toBe('Datos obtenidos');
      done(); // Importante: decirle a Jasmine que termin√≥ la prueba as√≠ncrona
    });
  });
});